#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Debug detalhado da p√°gina de extra√ß√£o
"""

import os
import sys
import traceback
import subprocess

def debug_extracao_page():
    """Debug detalhado da p√°gina de extra√ß√£o"""
    print("üîç DEBUG DETALHADO DA P√ÅGINA DE EXTRA√á√ÉO")
    print("=" * 60)
    
    # 1. Verificar encoding do arquivo
    print("1. Verificando encoding do arquivo...")
    try:
        with open('pages/6_Extracao_Dados.py', 'rb') as f:
            content = f.read()
        print(f"   Tamanho do arquivo: {len(content)} bytes")
        
        # Tentar diferentes encodings
        encodings = ['utf-8', 'cp1252', 'latin1', 'iso-8859-1']
        for encoding in encodings:
            try:
                with open('pages/6_Extracao_Dados.py', 'r', encoding=encoding) as f:
                    test_content = f.read()
                print(f"   ‚úÖ Encoding {encoding}: OK")
                break
            except Exception as e:
                print(f"   ‚ùå Encoding {encoding}: {e}")
    except Exception as e:
        print(f"   ‚ùå Erro ao ler arquivo: {e}")
    
    # 2. Verificar se h√° caracteres problem√°ticos
    print("\n2. Verificando caracteres problem√°ticos...")
    try:
        with open('pages/6_Extracao_Dados.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Procurar por caracteres n√£o-ASCII
        non_ascii = []
        for i, char in enumerate(content):
            if ord(char) > 127:
                non_ascii.append((i, char, ord(char)))
                if len(non_ascii) > 10:  # Limitar para n√£o sobrecarregar
                    break
        
        if non_ascii:
            print(f"   ‚ö†Ô∏è  Encontrados {len(non_ascii)} caracteres n√£o-ASCII:")
            for pos, char, code in non_ascii[:5]:
                print(f"     Posi√ß√£o {pos}: '{char}' (c√≥digo {code})")
        else:
            print("   ‚úÖ Nenhum caractere problem√°tico encontrado")
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar caracteres: {e}")
    
    # 3. Testar importa√ß√£o da p√°gina
    print("\n3. Testando importa√ß√£o da p√°gina...")
    try:
        # Adicionar o diret√≥rio atual ao path
        sys.path.insert(0, '.')
        
        # Tentar importar m√≥dulo por m√≥dulo
        print("   Testando importa√ß√µes b√°sicas...")
        import streamlit as st
        print("   ‚úÖ streamlit importado")
        
        import pandas as pd
        print("   ‚úÖ pandas importado")
        
        import os
        print("   ‚úÖ os importado")
        
        # Tentar importar a p√°gina
        print("   Testando importa√ß√£o da p√°gina...")
        import importlib.util
        spec = importlib.util.spec_from_file_location("extracao_page", "pages/6_Extracao_Dados.py")
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        print("   ‚úÖ P√°gina importada com sucesso")
        
    except Exception as e:
        print(f"   ‚ùå Erro na importa√ß√£o: {e}")
        print("   Traceback completo:")
        traceback.print_exc()
    
    # 4. Testar execu√ß√£o do Extra√ß√£o.py via subprocess
    print("\n4. Testando execu√ß√£o do Extra√ß√£o.py...")
    try:
        result = subprocess.run(
            [sys.executable, "Extra√ß√£o.py"],
            capture_output=True,
            text=True,
            timeout=10,
            encoding='cp1252',
            errors='replace'
        )
        print(f"   C√≥digo de sa√≠da: {result.returncode}")
        if result.returncode == 0:
            print("   ‚úÖ Extra√ß√£o.py executou com sucesso")
        else:
            print("   ‚ùå Extra√ß√£o.py falhou")
            print(f"   Stderr: {result.stderr[:300]}...")
    except subprocess.TimeoutExpired:
        print("   ‚è∞ Extra√ß√£o.py demorou mais de 10 segundos (pode ser normal)")
    except Exception as e:
        print(f"   ‚ùå Erro ao executar Extra√ß√£o.py: {e}")
    
    # 5. Verificar se o dashboard est√° rodando
    print("\n5. Verificando status do dashboard...")
    try:
        import requests
        response = requests.get("http://localhost:8502", timeout=5)
        print(f"   Status HTTP: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Dashboard est√° respondendo")
        else:
            print("   ‚ùå Dashboard n√£o est√° respondendo corretamente")
    except ImportError:
        print("   ‚ö†Ô∏è  requests n√£o dispon√≠vel, verificando via netstat...")
        try:
            result = subprocess.run(["netstat", "-an"], capture_output=True, text=True)
            if ":8502" in result.stdout:
                print("   ‚úÖ Dashboard est√° rodando na porta 8502")
            else:
                print("   ‚ùå Dashboard n√£o est√° rodando")
        except Exception as e:
            print(f"   ‚ùå Erro ao verificar netstat: {e}")
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar dashboard: {e}")
    
    print("\n" + "=" * 60)
    print("DEBUG CONCLU√çDO")

if __name__ == "__main__":
    debug_extracao_page()
