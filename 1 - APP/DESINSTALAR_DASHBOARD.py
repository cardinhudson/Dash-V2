#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DESINSTALADOR - DASHBOARD KE5Z
=============================

Este script remove completamente o Dashboard KE5Z do sistema.

Autor: Sistema Autom√°tico
Data: 2025
"""

import os
import sys
import shutil
import platform
from pathlib import Path

class DashboardUninstaller:
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.venv_dir = self.project_dir / "venv"
        
    def print_header(self):
        """Imprime o cabe√ßalho do desinstalador"""
        print("=" * 60)
        print("üóëÔ∏è DESINSTALADOR - DASHBOARD KE5Z")
        print("=" * 60)
        print("Este desinstalador ir√° remover:")
        print("‚Ä¢ Ambiente virtual Python")
        print("‚Ä¢ Arquivos tempor√°rios")
        print("‚Ä¢ Atalhos criados")
        print("‚Ä¢ Configura√ß√µes locais")
        print("=" * 60)
        print()
        
    def confirm_uninstall(self):
        """Confirma se o usu√°rio quer desinstalar"""
        print("‚ö†Ô∏è ATEN√á√ÉO: Esta a√ß√£o ir√° remover completamente o Dashboard KE5Z!")
        print()
        
        while True:
            response = input("Deseja continuar com a desinstala√ß√£o? (s/n): ").lower().strip()
            if response in ['s', 'sim', 'y', 'yes']:
                return True
            elif response in ['n', 'n√£o', 'nao', 'no']:
                return False
            else:
                print("Por favor, responda 's' para sim ou 'n' para n√£o.")
    
    def remove_virtual_environment(self):
        """Remove o ambiente virtual"""
        print("üóëÔ∏è Removendo ambiente virtual...")
        
        try:
            if self.venv_dir.exists():
                shutil.rmtree(self.venv_dir)
                print("‚úÖ Ambiente virtual removido!")
            else:
                print("‚ÑπÔ∏è Ambiente virtual n√£o encontrado.")
            return True
            
        except Exception as e:
            print(f"‚ùå ERRO ao remover ambiente virtual: {e}")
            return False
    
    def remove_shortcuts(self):
        """Remove atalhos criados"""
        print("üîó Removendo atalhos...")
        
        try:
            if platform.system() == "Windows":
                import winshell
                desktop = winshell.desktop()
                shortcut_path = os.path.join(desktop, "Dashboard KE5Z.lnk")
                
                if os.path.exists(shortcut_path):
                    os.remove(shortcut_path)
                    print("‚úÖ Atalho 'Dashboard KE5Z' removido da √°rea de trabalho!")
                    print(f"   üìç Localiza√ß√£o removida: {shortcut_path}")
                else:
                    print("‚ÑπÔ∏è Atalho da √°rea de trabalho n√£o encontrado.")
            else:
                print("‚ÑπÔ∏è Sistema n√£o √© Windows - nenhum atalho para remover.")
            
            return True
            
        except ImportError:
            print("‚ÑπÔ∏è M√≥dulo para remo√ß√£o de atalhos n√£o dispon√≠vel.")
            print("   O atalho pode precisar ser removido manualmente.")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover atalhos: {e}")
            print("   O atalho pode precisar ser removido manualmente.")
            return True
    
    def remove_temp_files(self):
        """Remove arquivos tempor√°rios"""
        print("üßπ Removendo arquivos tempor√°rios...")
        
        try:
            # Remover arquivos __pycache__
            for root, dirs, files in os.walk(self.project_dir):
                for dir_name in dirs[:]:
                    if dir_name == "__pycache__":
                        cache_dir = os.path.join(root, dir_name)
                        shutil.rmtree(cache_dir)
                        dirs.remove(dir_name)
            
            # Remover arquivos .pyc
            for root, dirs, files in os.walk(self.project_dir):
                for file_name in files:
                    if file_name.endswith('.pyc'):
                        os.remove(os.path.join(root, file_name))
            
            print("‚úÖ Arquivos tempor√°rios removidos!")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover alguns arquivos tempor√°rios: {e}")
            return True
    
    def remove_logs(self):
        """Remove arquivos de log"""
        print("üìù Removendo arquivos de log...")
        
        try:
            log_files = [
                "nuitka-crash-report.xml",
                "*.log"
            ]
            
            for pattern in log_files:
                for file_path in self.project_dir.glob(pattern):
                    if file_path.is_file():
                        file_path.unlink()
            
            print("‚úÖ Arquivos de log removidos!")
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel remover alguns logs: {e}")
            return True
    
    def run_uninstall(self):
        """Executa o processo completo de desinstala√ß√£o"""
        self.print_header()
        
        if not self.confirm_uninstall():
            print("\n‚ùå Desinstala√ß√£o cancelada pelo usu√°rio.")
            return False
        
        steps = [
            ("Removendo ambiente virtual", self.remove_virtual_environment),
            ("Removendo atalhos", self.remove_shortcuts),
            ("Removendo arquivos tempor√°rios", self.remove_temp_files),
            ("Removendo arquivos de log", self.remove_logs)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã {step_name}...")
            step_func()
        
        print("\n" + "=" * 60)
        print("‚úÖ DESINSTALA√á√ÉO CONCLU√çDA!")
        print("=" * 60)
        print("O Dashboard KE5Z foi removido do sistema.")
        print()
        print("üìÅ Arquivos mantidos:")
        print("   ‚Ä¢ C√≥digo fonte do projeto")
        print("   ‚Ä¢ Dados e configura√ß√µes")
        print("   ‚Ä¢ Documenta√ß√£o")
        print()
        print("üí° Para reinstalar, execute novamente o instalador.")
        print("=" * 60)
        
        input("\nPressione Enter para finalizar...")
        return True

def main():
    """Fun√ß√£o principal"""
    try:
        uninstaller = DashboardUninstaller()
        uninstaller.run_uninstall()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Desinstala√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå ERRO CR√çTICO: {e}")
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    main()
