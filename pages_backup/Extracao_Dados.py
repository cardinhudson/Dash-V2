import streamlit as st
import pandas as pd
import os
from datetime import datetime
from auth import (verificar_autenticacao, exibir_header_usuario,
                  verificar_status_aprovado, eh_administrador)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Extra√ß√£o de Dados - Dashboard KE5Z",
    page_icon="üì•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Verificar autentica√ß√£o
verificar_autenticacao()

# Verificar se o usu√°rio est√° aprovado
if ('usuario_nome' in st.session_state and 
    not verificar_status_aprovado(st.session_state.usuario_nome)):
    st.warning("‚è≥ Sua conta ainda est√° pendente de aprova√ß√£o.")
    st.stop()

# Verificar se √© administrador (apenas admin pode fazer extra√ß√£o)
if not eh_administrador():
    st.error("üîí **Acesso Restrito**")
    st.error("Apenas administradores podem acessar a p√°gina de extra√ß√£o de dados.")
    st.info("üí° Entre em contato com o administrador do sistema se precisar de acesso.")
    st.stop()

# Header
st.title("üì• Extra√ß√£o de Dados KE5Z")
st.subheader("Processamento e consolida√ß√£o de arquivos Excel")

# Exibir header do usu√°rio
exibir_header_usuario()

st.markdown("---")

# Detectar ambiente (cloud vs local)
try:
    base_url = st.get_option('server.baseUrlPath') or ''
    is_cloud = 'share.streamlit.io' in base_url
except Exception:
    is_cloud = False

# Aviso sobre limita√ß√µes no cloud
if is_cloud:
    st.warning("‚òÅÔ∏è **Modo Cloud Detectado**")
    st.warning("A extra√ß√£o autom√°tica n√£o funciona no Streamlit Cloud devido a limita√ß√µes de seguran√ßa.")
    
    st.markdown("---")
    st.subheader("üì§ Upload Manual de Dados")
    st.info("üí° **No Streamlit Cloud, use upload manual:**")
    
    # Interface de upload para cloud
    uploaded_files = st.file_uploader(
        "Selecione arquivos Excel para processar:",
        type=['xlsx', 'xls'],
        accept_multiple_files=True,
        help="Selecione os arquivos KE5Z em formato Excel"
    )
    
    if uploaded_files:
        st.success(f"‚úÖ {len(uploaded_files)} arquivo(s) carregado(s)")
        
        if st.button("üîÑ Processar Arquivos Carregados", type="primary"):
            try:
                # Processar arquivos carregados
                dataframes = []
                progress_bar = st.progress(0)
                
                for i, uploaded_file in enumerate(uploaded_files):
                    st.write(f"üìÑ Processando: {uploaded_file.name}")
                    df = pd.read_excel(uploaded_file)
                    dataframes.append(df)
                    progress_bar.progress((i + 1) / len(uploaded_files))
                
                # Consolidar dados
                df_total = pd.concat(dataframes, ignore_index=True)
                
                # Mostrar preview
                st.success("‚úÖ Dados processados com sucesso!")
                st.metric("Total de Registros", f"{len(df_total):,}")
                st.dataframe(df_total.head(10))
                
                # Download do arquivo processado
                @st.cache_data
                def convert_df(df):
                    return df.to_csv(index=False).encode('utf-8')
                
                csv_data = convert_df(df_total)
                
                st.download_button(
                    label="üì• Baixar Dados Processados (CSV)",
                    data=csv_data,
                    file_name=f'KE5Z_processado_{datetime.now().strftime("%Y%m%d_%H%M")}.csv',
                    mime='text/csv'
                )
                
                st.info("üí° **Pr√≥ximos passos:**")
                st.info("1. Baixe o arquivo CSV processado")
                st.info("2. Converta para Parquet localmente se necess√°rio")
                st.info("3. Fa√ßa commit no reposit√≥rio para atualizar o dashboard")
                
            except Exception as e:
                st.error(f"‚ùå Erro ao processar arquivos: {str(e)}")
    
    st.markdown("---")
    st.subheader("üìã Instru√ß√µes para Cloud")
    
    with st.expander("üåê Como atualizar dados no Streamlit Cloud"):
        st.markdown("""
        ### üì§ **M√©todo 1: Upload Manual (Recomendado)**
        1. Use o upload acima para processar arquivos
        2. Baixe o arquivo CSV processado
        3. Converta para Parquet localmente:
           ```python
           import pandas as pd
           df = pd.read_csv('arquivo.csv')
           df.to_parquet('KE5Z/KE5Z.parquet')
           ```
        4. Fa√ßa commit no GitHub
        5. Deploy autom√°tico atualizar√° o dashboard
        
        ### üñ•Ô∏è **M√©todo 2: Processamento Local**
        1. Execute o dashboard localmente
        2. Use esta p√°gina para extrair dados
        3. Fa√ßa commit dos arquivos gerados
        4. Deploy autom√°tico no cloud
        
        ### üìä **M√©todo 3: Arquivo Direto**
        1. Execute `Extra√ß√£o.py` localmente
        2. Copie `KE5Z.parquet` para o reposit√≥rio
        3. Fa√ßa commit e push
        4. Dashboard cloud ser√° atualizado
        """)
    
    st.stop()

# Interface de extra√ß√£o
st.info("üíª **Modo Local Detectado** - Extra√ß√£o dispon√≠vel")

# Configura√ß√µes de pastas
st.subheader("üìÅ Configura√ß√£o de Pastas")

# Pastas padr√£o baseadas no c√≥digo original
pasta_opcoes_default = [
    os.path.join(
        os.path.expanduser("~"),
        "Stellantis", "GEIB - General", "GEIB", "Partagei_2025",
        "1 - S√çNTESE", "11 - SAPIENS", "02 - Extra√ß√µes", "KE5Z"
    ),
    os.path.join(
        os.path.expanduser("~"),
        "Stellantis", "GEIB - GEIB", "Partagei_2025",
        "1 - S√çNTESE", "11 - SAPIENS", "02 - Extra√ß√µes", "KE5Z"
    ),
]

# Permitir pasta personalizada
col1, col2 = st.columns([2, 1])

with col1:
    usar_pasta_personalizada = st.checkbox("Usar pasta personalizada")
    
    if usar_pasta_personalizada:
        pasta_origem = st.text_input(
            "Pasta de origem dos arquivos Excel:",
            placeholder="C:\\caminho\\para\\pasta\\KE5Z"
        )
    else:
        st.info("Usando pastas padr√£o do sistema Stellantis")
        pasta_origem = None

with col2:
    st.markdown("### üìã Pastas Padr√£o:")
    for i, pasta in enumerate(pasta_opcoes_default, 1):
        if os.path.exists(pasta):
            st.success(f"‚úÖ Op√ß√£o {i}: Encontrada")
        else:
            st.error(f"‚ùå Op√ß√£o {i}: N√£o encontrada")

# Verificar pasta de origem
pasta_encontrada = None

if not usar_pasta_personalizada:
    for pasta_opcao in pasta_opcoes_default:
        if os.path.exists(pasta_opcao):
            pasta_encontrada = pasta_opcao
            break
else:
    if pasta_origem and os.path.exists(pasta_origem):
        pasta_encontrada = pasta_origem

# Mostrar status da pasta
if pasta_encontrada:
    st.success(f"‚úÖ **Pasta encontrada:** `{pasta_encontrada}`")
    
    # Listar arquivos Excel na pasta
    try:
        arquivos_excel = [f for f in os.listdir(pasta_encontrada) if f.endswith(('.xlsx', '.xls'))]
        
        if arquivos_excel:
            st.info(f"üìÑ **{len(arquivos_excel)} arquivos Excel encontrados:**")
            
            # Mostrar lista de arquivos em colunas
            cols = st.columns(3)
            for i, arquivo in enumerate(arquivos_excel):
                with cols[i % 3]:
                    st.write(f"‚Ä¢ {arquivo}")
        else:
            st.warning("‚ö†Ô∏è Nenhum arquivo Excel encontrado na pasta")
            
    except Exception as e:
        st.error(f"‚ùå Erro ao listar arquivos: {str(e)}")
        
else:
    st.error("‚ùå **Pasta n√£o encontrada**")
    if not usar_pasta_personalizada:
        st.error("Nenhuma das pastas padr√£o foi encontrada no sistema")
    else:
        st.error("Pasta personalizada n√£o existe ou n√£o foi especificada")

# Configura√ß√µes de sa√≠da
st.markdown("---")
st.subheader("üíæ Configura√ß√£o de Sa√≠da")

col1, col2 = st.columns(2)

with col1:
    salvar_local = st.checkbox("Salvar na pasta do dashboard (KE5Z/)", value=True)
    
with col2:
    salvar_excel_separado = st.checkbox("Gerar arquivos Excel por USI", value=False)

# Bot√£o de extra√ß√£o
st.markdown("---")
st.subheader("üöÄ Executar Extra√ß√£o")

if pasta_encontrada:
    if st.button("üì• Iniciar Extra√ß√£o de Dados", type="primary", use_container_width=True):
        
        # Barra de progresso
        progress_bar = st.progress(0)
        status_text = st.empty()
        log_container = st.container()
        
        try:
            with log_container:
                st.write("**üìã Log de Execu√ß√£o:**")
                log_placeholder = st.empty()
                logs = []
                
                # Fun√ß√£o para adicionar log
                def add_log(message):
                    timestamp = datetime.now().strftime("%H:%M:%S")
                    logs.append(f"[{timestamp}] {message}")
                    log_placeholder.text("\n".join(logs[-10:]))  # Mostrar √∫ltimas 10 linhas
                
                # Iniciar processamento
                add_log("üöÄ Iniciando extra√ß√£o de dados...")
                progress_bar.progress(10)
                
                # Lista para armazenar DataFrames
                dataframes = []
                arquivos_processados = 0
                
                # Processar cada arquivo Excel
                for arquivo in arquivos_excel:
                    try:
                        caminho_arquivo = os.path.join(pasta_encontrada, arquivo)
                        add_log(f"üìÑ Processando: {arquivo}")
                        
                        # Ler arquivo Excel
                        df = pd.read_excel(caminho_arquivo)
                        dataframes.append(df)
                        arquivos_processados += 1
                        
                        progress = 10 + (arquivos_processados / len(arquivos_excel)) * 60
                        progress_bar.progress(int(progress))
                        
                    except Exception as e:
                        add_log(f"‚ùå Erro ao processar {arquivo}: {str(e)}")
                
                if not dataframes:
                    st.error("‚ùå Nenhum arquivo foi processado com sucesso")
                    st.stop()
                
                # Consolidar dados
                add_log("üîÑ Consolidando dados...")
                progress_bar.progress(75)
                
                df_total = pd.concat(dataframes, ignore_index=True)
                add_log(f"‚úÖ {len(dataframes)} arquivos consolidados")
                add_log(f"üìä Total de registros: {len(df_total)}")
                
                # Processamento dos dados (baseado no c√≥digo original)
                add_log("‚öôÔ∏è Processando dados...")
                
                # Renomear colunas conforme c√≥digo original
                renomeacoes = {
                    'Texto': 'Texto breve',
                    'Qtd.': 'QTD',
                    'N¬∫ conta': 'N¬∫conta',
                    'Centro cst': 'Centrocst',
                    'doc.ref': 'N¬∫doc.ref.',
                    'Type 07': 'Account',
                    'Per√≠odo': 'Mes'
                }
                
                for old_name, new_name in renomeacoes.items():
                    if old_name in df_total.columns:
                        df_total.rename(columns={old_name: new_name}, inplace=True)
                
                # Criar coluna de per√≠odo em texto
                if 'Mes' in df_total.columns:
                    meses = {
                        1: 'janeiro', 2: 'fevereiro', 3: 'mar√ßo', 4: 'abril',
                        5: 'maio', 6: 'junho', 7: 'julho', 8: 'agosto',
                        9: 'setembro', 10: 'outubro', 11: 'novembro', 12: 'dezembro'
                    }
                    df_total['Per√≠odo'] = df_total['Mes'].map(meses)
                
                # Reordenar colunas
                if 'Mes' in df_total.columns and 'Per√≠odo' in df_total.columns:
                    outras_colunas = [col for col in df_total.columns if col not in ['Mes', 'Per√≠odo']]
                    df_total = df_total[['Mes', 'Per√≠odo'] + outras_colunas]
                
                progress_bar.progress(90)
                
                # Salvar arquivos
                add_log("üíæ Salvando arquivos...")
                
                if salvar_local:
                    # Salvar arquivo principal
                    caminho_parquet = os.path.join("KE5Z", "KE5Z.parquet")
                    df_total.to_parquet(caminho_parquet, index=False)
                    add_log(f"‚úÖ Arquivo Parquet salvo: {caminho_parquet}")
                    
                    # Salvar Excel tamb√©m
                    caminho_excel = os.path.join("KE5Z", "KE5Z.xlsx")
                    df_total.to_excel(caminho_excel, index=False)
                    add_log(f"‚úÖ Arquivo Excel salvo: {caminho_excel}")
                
                # Salvar arquivos por USI se solicitado
                if salvar_excel_separado and 'USI' in df_total.columns:
                    usis_unicas = df_total['USI'].dropna().unique()
                    for usi in usis_unicas:
                        df_usi = df_total[df_total['USI'] == usi]
                        nome_arquivo = f"KE5Z_{usi.lower().replace(' ', '_')}.xlsx"
                        caminho_usi = os.path.join("KE5Z", nome_arquivo)
                        df_usi.to_excel(caminho_usi, index=False)
                        add_log(f"‚úÖ Arquivo USI salvo: {nome_arquivo}")
                
                progress_bar.progress(100)
                add_log("üéâ Extra√ß√£o conclu√≠da com sucesso!")
                
                # Mostrar resumo
                st.success("‚úÖ **Extra√ß√£o Conclu√≠da!**")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Arquivos Processados", arquivos_processados)
                with col2:
                    st.metric("Total de Registros", f"{len(df_total):,}")
                with col3:
                    st.metric("Colunas", len(df_total.columns))
                
                # Mostrar preview dos dados
                st.subheader("üëÄ Preview dos Dados")
                st.dataframe(df_total.head(10), use_container_width=True)
                
                # Informa√ß√µes das colunas
                st.subheader("üìä Informa√ß√µes das Colunas")
                col_info = pd.DataFrame({
                    'Coluna': df_total.columns,
                    'Tipo': [str(dtype) for dtype in df_total.dtypes],
                    'N√£o Nulos': [df_total[col].notna().sum() for col in df_total.columns],
                    'Valores √önicos': [df_total[col].nunique() for col in df_total.columns]
                })
                st.dataframe(col_info, use_container_width=True)
                
        except Exception as e:
            st.error(f"‚ùå **Erro durante a extra√ß√£o:** {str(e)}")
            add_log(f"‚ùå Erro cr√≠tico: {str(e)}")

else:
    st.warning("‚ö†Ô∏è Configure uma pasta v√°lida antes de executar a extra√ß√£o")

# Informa√ß√µes adicionais
st.markdown("---")
st.subheader("‚ÑπÔ∏è Informa√ß√µes")

with st.expander("üìñ Como usar esta p√°gina"):
    st.markdown("""
    ### üéØ **Objetivo**
    Esta p√°gina substitui o arquivo `Extra√ß√£o.py` e permite processar arquivos Excel diretamente no dashboard.
    
    ### üìã **Passos para usar:**
    1. **Configure a pasta** onde est√£o os arquivos Excel
    2. **Verifique** se os arquivos foram encontrados
    3. **Configure as op√ß√µes** de sa√≠da
    4. **Execute a extra√ß√£o** clicando no bot√£o
    
    ### üìÅ **Arquivos gerados:**
    - `KE5Z/KE5Z.parquet` - Arquivo principal para o dashboard
    - `KE5Z/KE5Z.xlsx` - Arquivo Excel consolidado
    - Arquivos por USI (se habilitado)
    
    ### üîí **Seguran√ßa:**
    - Apenas administradores podem acessar esta p√°gina
    - Funciona apenas em ambiente local (n√£o no cloud)
    - Todos os arquivos s√£o salvos na pasta do projeto
    
    ### üí° **Vantagens:**
    - ‚úÖ N√£o usa subprocess (compat√≠vel com cloud se adaptado)
    - ‚úÖ Interface visual com progresso
    - ‚úÖ Logs detalhados de execu√ß√£o
    - ‚úÖ Preview dos dados processados
    - ‚úÖ Tratamento de erros robusto
    """)

with st.expander("üîß Configura√ß√µes T√©cnicas"):
    st.markdown(f"""
    ### üñ•Ô∏è **Ambiente Atual:**
    - **Modo**: {'‚òÅÔ∏è Cloud' if is_cloud else 'üíª Local'}
    - **Usu√°rio**: {st.session_state.get('usuario_nome', 'N/A')}
    - **Admin**: {'‚úÖ Sim' if eh_administrador() else '‚ùå N√£o'}
    
    ### üìÅ **Pastas Monitoradas:**
    """)
    
    for i, pasta in enumerate(pasta_opcoes_default, 1):
        status = "‚úÖ Existe" if os.path.exists(pasta) else "‚ùå N√£o existe"
        st.code(f"Op√ß√£o {i}: {status}\n{pasta}")
